from unittest import TestCase
from ergometer import Ergometer
from devicedatenmodell import ArduinoDatenModell


class test_Ergometer(TestCase):
    def test_set_bremse(self):
        ergo = Ergometer()
        ergo.setBremse(-1)
        self.assertEqual(ergo.bremse, 0)
        ergo.setBremse(0)
        self.assertEqual(ergo.bremse, 0)
        ergo.setBremse(1)
        self.assertEqual(ergo.bremse, 1)
        ergo.setBremse(99)
        self.assertEqual(ergo.bremse, 99)
        ergo.setBremse(100)
        self.assertEqual(ergo.bremse, 100)
        ergo.setBremse(101)
        self.assertEqual(ergo.bremse, 100)

    def test_bremse_minus(self):
        ergo = Ergometer()
        ergo.bremseMinus()
        self.assertEqual(ergo.bremse, 0)
        ergo.setBremse(1)
        ergo.bremseMinus()
        self.assertEqual(ergo.bremse, 0)
        ergo.setBremse(100)
        ergo.bremseMinus()
        self.assertEqual(ergo.bremse, 99)

    def test_bremse_minus_minus(self):
        ergo = Ergometer()
        ergo.bremseMinusMinus()
        self.assertEqual(ergo.bremse, 0)
        ergo.setBremse(1)
        ergo.bremseMinusMinus()
        self.assertEqual(ergo.bremse, 0)
        ergo.setBremse(100)
        ergo.bremseMinusMinus()
        self.assertEqual(ergo.bremse, 95)

    def test_bremse_plus(self):
        ergo = Ergometer()
        ergo.bremsePlus()
        self.assertEqual(ergo.bremse, 1)
        ergo.setBremse(100)
        ergo.bremsePlus()
        self.assertEqual(ergo.bremse, 100)
        ergo.setBremse(99)
        ergo.bremsePlus()
        self.assertEqual(ergo.bremse, 100)
        ergo.setBremse(98)
        ergo.bremsePlus()
        self.assertEqual(ergo.bremse, 99)

    def test_bremse_plus_plus(self):
        ergo = Ergometer()
        ergo.bremsePlusPlus()
        self.assertEqual(ergo.bremse, 5)
        ergo.setBremse(100)
        ergo.bremsePlusPlus()
        self.assertEqual(ergo.bremse, 100)
        ergo.setBremse(99)
        ergo.bremsePlusPlus()
        self.assertEqual(ergo.bremse, 100)
        ergo.setBremse(94)
        ergo.bremsePlusPlus()
        self.assertEqual(ergo.bremse, 99)

    def test_lese_distance(self):
        ergo = Ergometer()
        ArduinoDatenModell(distanze=0)
        ergo.update_device_werte(ArduinoDatenModell(distanze=0))
        self.assertEqual(ergo.lese_distance(), 0)
        self.assertEqual(0, ergo.distanze)
        ergo.update_device_werte(ArduinoDatenModell(distanze=1))
        self.assertEqual(ergo.lese_distance(), 1)
        ergo.update_device_werte(ArduinoDatenModell(distanze=255))
        self.assertEqual(ergo.lese_distance(), 255)
        self.assertEqual(255, ergo.device_werte.distanze)
        self.assertEqual(0, ergo.distanze)
        ergo.update_device_werte(ArduinoDatenModell(distanze=0))
        self.assertEqual(ergo.lese_distance(), 255)
        ergo.update_device_werte(ArduinoDatenModell(distanze=1))
        self.assertEqual(ergo.lese_distance(), 256)
        self.assertEqual(1, ergo.distanze)
        ergo = Ergometer()
        ergo.update_device_werte(ArduinoDatenModell(distanze=255))
        self.assertEqual(ergo.lese_distance(), 255)
        ergo.update_device_werte(ArduinoDatenModell(distanze=254))
        self.assertEqual(ergo.lese_distance(), 1*255 + 254)
        ergo.update_device_werte(ArduinoDatenModell(distanze=253))
        self.assertEqual(ergo.lese_distance(), 2*255 + 253)
        ergo.update_device_werte(ArduinoDatenModell(distanze=252))
        self.assertEqual(ergo.lese_distance(), 3*255 + 252)
        ergo.update_device_werte(ArduinoDatenModell(distanze=251))
        self.assertEqual(ergo.lese_distance(), 4*255 + 251)

    def test_lese_cadence(self):
        ergo = Ergometer()
        ergo.update_device_werte(ArduinoDatenModell(distanze=1, cad=0))
        self.assertEqual(ergo.lese_cadence(), 0)
        ergo.update_device_werte(ArduinoDatenModell(distanze=1, cad=1))
        self.assertEqual(ergo.lese_cadence(), 1)
        ergo.update_device_werte(ArduinoDatenModell(distanze=1, cad=255))
        self.assertEqual(ergo.lese_cadence(), 255)

    def test_calc_cad_durchschnitt(self):
        ergo = Ergometer()
        ergo.update_device_werte(ArduinoDatenModell(distanze=0))
        self.assertEqual(ergo.calc_cad_durchschnitt(0), 0)
        self.assertEqual(ergo.calc_cad_durchschnitt(1000), 0)
        ergo.update_device_werte(ArduinoDatenModell(distanze=1))
        self.assertEqual(ergo.calc_cad_durchschnitt(1000), 60)
        self.assertEqual(ergo.calc_cad_durchschnitt(500), 120)
        ergo.update_device_werte(ArduinoDatenModell(distanze=100))
        self.assertEqual(ergo.calc_cad_durchschnitt(60000), 100)
        self.assertEqual(ergo.calc_cad_durchschnitt(61000), 98)
        self.assertEqual(ergo.calc_cad_durchschnitt(59000), 102)
        self.assertEqual(ergo.calc_cad_durchschnitt(180000, 1), 33.3)
        self.assertEqual(ergo.calc_cad_durchschnitt(180000, 2), 33.33)
        self.assertEqual(ergo.calc_cad_durchschnitt(180000, 3), 33.333)
        self.assertEqual(ergo.calc_cad_durchschnitt(90000, 0), 67)
        self.assertEqual(ergo.calc_cad_durchschnitt(90000, 1), 66.7)
        self.assertEqual(ergo.calc_cad_durchschnitt(90000, 2), 66.67)
        self.assertEqual(ergo.calc_cad_durchschnitt(90000, 3), 66.667)
        ergo.update_device_werte(ArduinoDatenModell(distanze=255))
        self.assertEqual(ergo.calc_cad_durchschnitt(128000), 120)
        ergo.update_device_werte(ArduinoDatenModell(distanze=0))
        self.assertEqual(ergo.calc_cad_durchschnitt(255000), 60)
        ergo.update_device_werte(ArduinoDatenModell(distanze=45))
        self.assertEqual(ergo.calc_cad_durchschnitt(180000), 100)

    def test_calc_distanze_am_ende(self):
        ergo = Ergometer()
        ergo.update_device_werte(ArduinoDatenModell(distanze=1, cad=0))
        self.assertEqual(1, ergo.calc_distanze_am_ende(0, 10000))
        ergo = Ergometer()
        ergo.update_device_werte(ArduinoDatenModell(distanze=0, cad=60))
        self.assertEqual(60, ergo.calc_distanze_am_ende(0, 60000))
        self.assertEqual(30, ergo.calc_distanze_am_ende(30000, 60000))
        ergo.update_device_werte(ArduinoDatenModell(distanze=30, cad=60))
        self.assertEqual(90, ergo.calc_distanze_am_ende(0, 60000))
        self.assertEqual(60, ergo.calc_distanze_am_ende(30000, 60000))

    def test_update_device_werte(self):
        ergo = Ergometer()
        ergo.update_device_werte(ArduinoDatenModell(distanze=1))
        self.assertEqual(ergo.distanze, 0)
        ergo.update_device_werte(ArduinoDatenModell(distanze=255))
        self.assertEqual(ergo.distanze, 0)
        ergo.update_device_werte(ArduinoDatenModell(distanze=1))
        self.assertEqual(ergo.distanze, 1)

    def test_update_cad_zeitenliste(self):
        ergo = Ergometer()
        self.assertEqual((), ergo.update_cad_zeitenliste((0, 0, 0, 0)))
        self.assertEqual([], ergo.cad_zeitenliste)
        self.assertEqual((1,), ergo.update_cad_zeitenliste((1, 0, 0, 0)))
        self.assertEqual(1, len(ergo.cad_zeitenliste))
        self.assertEqual((2,), ergo.update_cad_zeitenliste((1, 2, 0, 0)))
        self.assertEqual(2, len(ergo.cad_zeitenliste))
        ergo.cad_zeitenliste = [2, 3, 4, 5]
        self.assertEqual(4, len(ergo.cad_zeitenliste))
        neue_zeiten = [(4, 5, 6, 7), (8, 9, 6, 7), (8, 9, 10, 7)]
        self.assertEqual(neue_zeiten[0][2:], ergo.update_cad_zeitenliste(neue_zeiten[0]))
        self.assertEqual(6, len(ergo.cad_zeitenliste))
        self.assertEqual(neue_zeiten[1][:2], ergo.update_cad_zeitenliste(neue_zeiten[1]))
        self.assertEqual(8, len(ergo.cad_zeitenliste))
        self.assertEqual(neue_zeiten[2][2:3], ergo.update_cad_zeitenliste(neue_zeiten[2]))
        self.assertEqual(9, len(ergo.cad_zeitenliste))
        ergo = Ergometer()
